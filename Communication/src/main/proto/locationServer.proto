syntax = "proto3";

option java_multiple_files = true;
package pt.tecnico.sec.hdlt.communication;

service LocationServer {
  rpc SubmitLocationReport (SubmitLocationReportRequest) returns (SubmitLocationReportResponse) {}
  rpc ObtainLocationReport (ObtainLocationReportRequest) returns (ObtainLocationReportResponse) {}
  rpc ObtainUsersAtLocation (ObtainUsersAtLocationRequest) returns (ObtainUsersAtLocationResponse) {}
}

service ClientServer {
  rpc RequestLocationProof (LocationInformation) returns (SignedLocationProof) {}
}

// ---------------------------------- SubmitLocationReport ----------------------------------

message SubmitLocationReportRequest {
  bytes encryptedSignedLocationReport = 1;
  bytes key = 3;
  bytes iv = 4;
//  int64 epoch = 3;
}

message LocationReport {
  LocationInformation locationInformation = 1;
  bytes locationInformationSignature = 2;
  repeated SignedLocationProof locationProof = 3;
}

message LocationInformation {
  int32 userId = 1; // UserId of the user that wants to prove its location
  int64 epoch = 2;
  Position position = 3;
}

message SignedLocationProof {
    LocationProof locationProof = 1;
    bytes signature = 2;
}

message LocationProof {
  int32 witnessId = 1; // UserId of the user that received a location proof request
  int32 proverId = 2; // UserId of the user that wants to prove its location
  int64 epoch = 3;
  Position position = 4;
}

message Position {
  int64 x = 1;
  int64 y = 2;
}

message SubmitLocationReportResponse {}

// ---------------------------------- ObtainLocationReport ----------------------------------

message ObtainLocationReportRequest {
  bytes encryptedSignedLocationQuery = 1;
  bytes key = 2;
  bytes iv = 3;
}

message SignedLocationQuery {
  LocationQuery locationQuery = 1;
  bytes signature = 2;
}

message LocationQuery {
  int32 userId = 1;
  int64 epoch = 2;
  bool isHA = 3;
}

message ObtainLocationReportResponse {
  bytes encryptedSignedLocationReport = 1; // Encrypted bytes of message LocationInformation
}

message SignedLocationReport {
    LocationReport locationReport = 1;
    bytes signedLocationReport = 2;
}

// ---------------------------------- ObtainUsersAtLocation ----------------------------------

message ObtainUsersAtLocationRequest {

}

message ObtainUsersAtLocationResponse {

}