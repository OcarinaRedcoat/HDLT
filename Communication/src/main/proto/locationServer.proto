syntax = "proto3";

option java_multiple_files = true;
package pt.tecnico.sec.hdlt.communication;

service LocationServer {
  rpc SubmitLocationReport (SubmitLocationReportRequest) returns (SubmitLocationReportResponse) {}
  rpc ObtainLocationReport (ObtainLocationReportRequest) returns (ObtainLocationReportResponse) {}
  rpc ObtainMyProofs (ObtainMyProofsRequest) returns (ObtainMyProofsResponse) {}
  rpc ObtainUsersAtLocation (ObtainUsersAtLocationRequest) returns (ObtainUsersAtLocationResponse) {}
}

service ClientServer {
  rpc RequestLocationProof (LocationInformationRequest) returns (SignedLocationProof) {}
}

// ---------------------------------- SubmitLocationReport ----------------------------------

message SubmitLocationReportRequest {
  bytes encryptedSignedLocationReport = 1;
  bytes key = 2;
  bytes iv = 3;
}

message LocationReport {
  LocationInformation locationInformation = 1;
  repeated SignedLocationProof locationProof = 2;
  string nonce = 3;
  int32 wts = 4;
}

message LocationInformationRequest {
    LocationInformation locationInformation = 1;
    bytes signature = 2;
}

message LocationInformation {
  int32 userId = 1; // UserId of the user that wants to prove its location
  int64 epoch = 2;
  Position position = 3;
}

message SignedLocationProof {
    LocationProof locationProof = 1;
    bytes signature = 2;
}

message LocationProof {
  int32 witnessId = 1; // UserId of the user that received a location proof request
  int32 proverId = 2; // UserId of the user that wants to prove its location
  int64 epoch = 3;
  Position position = 4;
}

message Position {
  int64 x = 1;
  int64 y = 2;
}

message SubmitLocationReportResponse {}

// ---------------------------------- ObtainMyProofs ----------------------------------
message ObtainMyProofsRequest {
  bytes encryptedSignedProofsQuery = 1;
  bytes key = 2;
  bytes iv = 3;
}

message SignedProofsQuery {
  ProofsQuery proofsQuery = 1;
  bytes signature = 2;
}

message ProofsQuery {
  int32 userId = 1;
  string nonce = 2;
}

message ObtainMyProofsResponse {
  bytes encryptedServerSignedProofs = 1; // Encrypted bytes of message LocationInformation
  bytes iv = 2;
}

message ServerSignedProofs {
  Proofs proofs = 1;
  bytes serverSignature = 2;
}

message Proofs {
  repeated SignedLocationProof locationProof = 1;
  string nonce = 2;
}

// ---------------------------------- ObtainLocationReport ----------------------------------

message ObtainLocationReportRequest {
  bytes encryptedSignedLocationQuery = 1;
  bytes key = 2;
  bytes iv = 3;
}

message SignedLocationQuery {
  LocationQuery locationQuery = 1;
  bytes signature = 2;
}

message LocationQuery {
  int32 userId = 1;
  int64 epoch = 2;
  bool isHA = 3;
  string nonce = 4;
}

message ObtainLocationReportResponse {
  bytes encryptedServerSignedSignedLocationReport = 1; // Encrypted bytes of message LocationInformation
  bytes iv = 2;
}

message ServerSignedSignedLocationReport {
  SignedLocationReport signedLocationReport = 1;
  bytes serverSignature = 2;
}

message SignedLocationReport {
  LocationReport locationReport = 1;
  bytes userSignature = 2;
}

// ---------------------------------- ObtainUsersAtLocationRequest ----------------------------------

message  ObtainUsersAtLocationRequest {
  bytes encryptedSignedUsersAtLocationQuery = 1;
  bytes key = 2;
  bytes iv = 3;
}

message SignedUsersAtLocationQuery {
  UsersAtLocationQuery usersAtLocationQuery = 1;
  bytes signature = 2;
}

message UsersAtLocationQuery {
  Position pos = 1;
  int64 epoch = 2;
  string nonce = 3;
}

message SignedLocationReportList {
  repeated SignedLocationReport signedLocationReportList = 1;
}

message ServerSignedSignedLocationReportList {
  SignedLocationReportList signedLocationReportList = 1;
  bytes serverSignature = 2;
}

message ObtainUsersAtLocationResponse {
  bytes encryptedSignedLocationReportList = 1; // Encrypted bytes of message LocationInformation
  bytes iv = 2;
}